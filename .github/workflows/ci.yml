name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Release
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest] # Add macOS later

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Cache Rust dependencies and intermediate files
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cargo
      #       target
      #     key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
      #     restore-keys: |
      #       cargo-${{ runner.os }}-

      # - name: Cache .NET dependencies and intermediate files
      #   if: runner.os == 'windows-latest' || runner.os == 'ubuntu-latest'
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.nuget/packages
      #     key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
      #     restore-keys: |
      #       nuget-${{ runner.os }}-

      # - name: Cache Vulkan SDK
      #   id: cache-vulkan-sdk
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ github.workspace }}/VulkanSDK
      #     key: vulkan-sdk-${{ runner.os }}-1.3.283.0
      #     restore-keys: |
      #       vulkan-sdk-${{ runner.os }}-
      #       vulkan-sdk-

      - name: Setup Vulkan SDK
        uses: NcStudios/VulkanCI@v1.0
        with:
          sdkVersion: 1.3.283.0

      - name: Run Python build script
        run: python3 -u Krysalis.py
        shell: bash

      - name: Prepare artifact structure (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p artifact/Krysalis
          cp KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.dll artifact/Krysalis/KrysalisManaged.dll
          cp target/release/KrysalisNative.dll artifact/Krysalis/KrysalisNative.dll
          cp Krysalis/bin/Release/netstandard2.0/Krysalis.dll artifact/Krysalis.dll
          Compress-Archive -Path "artifact\\*" -DestinationPath "Krysalis-Windows-v${{ github.run_number }}.zip"
        shell: pwsh

      - name: Prepare artifact structure (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p artifact/Krysalis
          cp KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.dll artifact/Krysalis/KrysalisManaged.dll
          cp target/release/libKrysalisNative.so artifact/Krysalis/libKrysalisNative.so
          cp Krysalis/bin/Release/netstandard2.0/Krysalis.dll artifact/libKrysalis.dll
          zip -r "Krysalis-Linux-v${{ github.run_number }}.zip" artifact/*
        shell: bash

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Krysalis-Windows
          path: Krysalis-Windows-v${{ github.run_number }}.zip

      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Krysalis-Linux
          path: Krysalis-Linux-v${{ github.run_number }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: Krysalis-Windows
          path: artifacts/windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: Krysalis-Linux
          path: artifacts/linux

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: true
          body: |
            This release includes the following builds:
            - Windows and Linux builds of KrysalisManaged and KrysalisNative.

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/Krysalis-Windows-v${{ github.run_number }}.zip
          asset_name: Krysalis-Windows-v${{ github.run_number }}.zip
          asset_content_type: application/zip

      - name: Upload Linux release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux/Krysalis-Linux-v${{ github.run_number }}.zip
          asset_name: Krysalis-Linux-v${{ github.run_number }}.zip
          asset_content_type: application/zip
