name: Build DLLs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build Solution
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Generate version number using run number
      - name: Generate version number
        run: |
          echo "MAJOR_VERSION=1" >> $env:GITHUB_ENV
          echo "MINOR_VERSION=2" >> $env:GITHUB_ENV
          $patch_version = ${{ github.run_number }}
          $version = "${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.$patch_version"
          echo "VERSION=$version" >> $env:GITHUB_ENV

      # Cache Filament Library
      - name: Cache Filament Library
        uses: actions/cache@v3
        with:
          path: C:/Libraries/filament-windows
          key: filament-v1.55.0

      # Download Filament Library (if not cached)
      - name: Download Filament Library
        if: steps.cache-filament.outputs.cache-hit != 'true'
        run: |
          New-Item -ItemType Directory -Path "C:/Libraries/filament-windows/" -Force
          Invoke-WebRequest -Uri "https://github.com/google/filament/releases/download/v1.55.0/filament-v1.55.0-windows.tgz" -OutFile "filament-windows.tgz"
          tar -xzf filament-windows.tgz -C C:/Libraries/filament-windows/

      # Cache GLFW Library
      - name: Cache GLFW Library
        uses: actions/cache@v3
        with:
          path: C:/Libraries/glfw-3.4.bin.WIN64
          key: glfw-3.4

      # Download GLFW (if not cached)
      - name: Download GLFW
        if: steps.cache-glfw.outputs.cache-hit != 'true'
        run: |
          New-Item -ItemType Directory -Path "C:/Libraries/" -Force
          Invoke-WebRequest -Uri "https://github.com/glfw/glfw/releases/download/3.4/glfw-3.4.bin.WIN64.zip" -OutFile "glfw-3.4.bin.WIN64.zip"
          Expand-Archive -Path "glfw-3.4.bin.WIN64.zip" -DestinationPath "C:/Libraries/glfw-3.4.bin.WIN64/"
          Move-Item -Path "C:/Libraries/glfw-3.4.bin.WIN64/glfw-3.4.bin.WIN64/*" -Destination "C:/Libraries/glfw-3.4.bin.WIN64/" -Force
          Remove-Item -Path "C:/Libraries/glfw-3.4.bin.WIN64/glfw-3.4.bin.WIN64" -Recurse -Force

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Set up NuGet
        uses: NuGet/setup-nuget@v1

      - name: Install dependencies
        run: nuget restore Krysalis.sln

      - name: Build the solution
        run: msbuild Krysalis.sln /p:Configuration=Release /p:Platform=x64 /p:AdditionalOptions="/std:c++20"

      - name: Create artifact directory structure
        run: |
          New-Item -ItemType Directory -Path "artifact/Krysalis" -Force
          Copy-Item -Path "KrysalisManaged/bin/Release/net472/KrysalisManaged.dll" -Destination "artifact/" -Force
          Copy-Item -Path "x64/Release/KrysalisNative.dll" -Destination "artifact/Krysalis/" -Force
          Copy-Item -Path "assets/*" -Destination "artifact/Krysalis/" -Recurse -Force

      - name: Compress artifact directory into ZIP
        run: |
          Compress-Archive -Path "artifact\*" -DestinationPath "Krysalis-${{ env.VERSION }}.zip"

      # Create a new release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}  # Use the generated version number as the tag
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: true  # Set to true if this is a pre-release

      # Upload the artifact to the created release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Krysalis-${{ env.VERSION }}.zip
          asset_name: Krysalis-${{ env.VERSION }}.zip
          asset_content_type: application/zip
