name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build, Test, and Release
    strategy:
      matrix:
        os: [windows-gpu-t4-4-core]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Cache Rust dependencies and intermediate files
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cargo
      #       target
      #     key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
      #     restore-keys: |
      #       cargo-${{ runner.os }}-

      # - name: Cache .NET dependencies and intermediate files
      #   if: runner.os == 'windows-latest' || runner.os == 'ubuntu-latest'
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.nuget/packages
      #     key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
      #     restore-keys: |
      #       nuget-${{ runner.os }}-

      # - name: Cache Vulkan SDK
      #   id: cache-vulkan-sdk
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ github.workspace }}/VulkanSDK
      #     key: vulkan-sdk-${{ runner.os }}-1.3.283.0
      #     restore-keys: |
      #       vulkan-sdk-${{ runner.os }}-
      #       vulkan-sdk-

      - name: Set Up Artifact Names
        id: artifacts
        shell: bash
        env:
          ACTION_TAG: ${{ github.action_ref }}
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "vk-ci-artifact-name=vulkanCI-${{ inputs.sdkVersion }}-windows-2022-x64.zip" >> "$GITHUB_OUTPUT"
            echo "vk-ci-swiftshader-lib-name=vk_swiftshader.dll" >> "$GITHUB_OUTPUT"
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "vk-ci-artifact-name=vulkanCI-${{ inputs.sdkVersion }}-ubuntu-20.04-x64.zip" >> "$GITHUB_OUTPUT"
            echo "vk-ci-swiftshader-lib-name=libvk_swiftshader.so" >> "$GITHUB_OUTPUT"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "vk-ci-artifact-name=vulkanCI-${{ inputs.sdkVersion }}-macOS-12-x64.zip" >> "$GITHUB_OUTPUT"
            echo "vk-ci-swiftshader-lib-name=libvk_swiftshader.dylib" >> "$GITHUB_OUTPUT"
          else
            echo "Unsupported OS: ${{ runner.os }}"
            exit 1
          fi

          if [ -n "$ACTION_TAG" ]; then
            echo "vk-ci-action-tag=$ACTION_TAG" >> "$GITHUB_OUTPUT"
            echo "Using action ref: $ACTION_TAG"
          else
              LATEST_TAG=$(curl -s \
                "https://api.github.com/repos/NcStudios/VulkanCI/releases/latest" \
                | jq -r .tag_name)
              echo "vk-ci-action-tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
              echo "Using latest tag: $LATEST_TAG"
          fi

      - name: Download Artifacts
        uses: robinraju/release-downloader@v1.10
        with:
          repository: 'NcStudios/VulkanCI'
          tag: '${{ steps.artifacts.outputs.vk-ci-action-tag }}'
          out-file-path: 'VulkanSDK'
          extract: true

      - name: Setup Environment
        id: setup-environment
        shell: bash
        run: |
          INSTALL_PATH="${{ inputs.installPath }}/VulkanSDK/${{ inputs.sdkVersion }}"
          INSTALL_PATH="${INSTALL_PATH//\\//}"

          echo "VULKAN_SDK=$INSTALL_PATH" >> "$GITHUB_ENV"
          echo "VULKAN_SDK_VERSION=${{ inputs.sdkVersion }}" >> "$GITHUB_ENV"

          cat <<EOF > "$INSTALL_PATH/swiftshader/vk_swiftshader_icd.json"
          {
            "file_format_version": "1.0.0",
            "ICD": {
              "library_path": "$INSTALL_PATH/swiftshader/${{ steps.artifacts.outputs.vk-ci-swiftshader-lib-name }}",
              "api_version": "1.0.5"
            }
          }
          EOF

          echo "VK_DRIVER_FILES=$INSTALL_PATH/swiftshader/vk_swiftshader_icd.json" >> "$GITHUB_ENV"

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "VK_LAYER_PATH=$INSTALL_PATH/bin" >> "$GITHUB_ENV"
            echo "$INSTALL_PATH/bin" >> "$GITHUB_PATH"
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "VK_LAYER_PATH=$INSTALL_PATH/share/vulkan/explicit_layer.d" >> "$GITHUB_ENV"
            echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$INSTALL_PATH/lib:$INSTALL_PATH/swiftshader" >> "$GITHUB_ENV"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "VK_LAYER_PATH=$INSTALL_PATH/share/vulkan/explicit_layer.d" >> "$GITHUB_ENV"
            echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$INSTALL_PATH/lib:$INSTALL_PATH/swiftshader" >> "$GITHUB_ENV"
          else
            echo "Unsupported OS: ${{ runner.os }}"
            exit 1
          fi

          echo "vk-ci-vulkan-install-path=$INSTALL_PATH" >> "$GITHUB_OUTPUT"
          echo "vk-ci-swiftshader-install-path=$INSTALL_PATH/swiftshader" >> "$GITHUB_OUTPUT"

      - name: Run Python build script
        run: python3 -u Krysalis.py
        shell: bash

      - name: Run tests
        run: dotnet run --project KrysalisManagedTests/KrysalisManagedTests.csproj
        shell: bash

      - name: Prepare artifact structure (Windows)
        if: matrix.os == 'windows-2022-large'
        run: |
          mkdir -p artifact/Krysalis
          cp KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.dll artifact/Krysalis/KrysalisManaged.dll
          cp target/release/KrysalisNative.dll artifact/Krysalis/KrysalisNative.dll
          cp Krysalis/bin/Release/netstandard2.0/Krysalis.dll artifact/Krysalis.dll
          cd artifact
          Compress-Archive -Path @("Krysalis.dll", "Krysalis/") -DestinationPath "../Krysalis-Windows-v${{ github.run_number }}.zip"
        shell: bash

      - name: Prepare artifact structure (Linux)
        if: matrix.os == 'ubuntu-20.04-large'
        run: |
          mkdir -p artifact/Krysalis
          cp KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.dll artifact/Krysalis/KrysalisManaged.dll
          cp target/release/libKrysalisNative.so artifact/Krysalis/libKrysalisNative.so
          cp Krysalis/bin/Release/netstandard2.0/Krysalis.dll artifact/Krysalis.dll
          cd artifact
          zip -r "../Krysalis-Linux-v${{ github.run_number }}.zip" ./*
        shell: bash

      - name: Prepare artifact structure (macOS)
        if: matrix.os == 'macos-12-large'
        run: |
          mkdir -p artifact/Krysalis
          cp KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.dll artifact/Krysalis/KrysalisManaged.dll
          cp target/release/libKrysalisNative.dylib artifact/Krysalis/libKrysalisNative.dylib
          cp Krysalis/bin/Release/netstandard2.0/Krysalis.dll artifact/Krysalis.dll
          cd artifact
          zip -r "../Krysalis-macOS-v${{ github.run_number }}.zip" ./*
        shell: bash

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-2022-large'
        uses: actions/upload-artifact@v3
        with:
          name: Krysalis-Windows
          path: Krysalis-Windows-v${{ github.run_number }}.zip

      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-20.04-large'
        uses: actions/upload-artifact@v3
        with:
          name: Krysalis-Linux
          path: Krysalis-Linux-v${{ github.run_number }}.zip

      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-12-large'
        uses: actions/upload-artifact@v3
        with:
          name: Krysalis-macOS
          path: Krysalis-macOS-v${{ github.run_number }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: Krysalis-Windows
          path: artifacts/windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: Krysalis-Linux
          path: artifacts/linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: Krysalis-macOS
          path: artifacts/macos

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows/Krysalis-Windows-v${{ github.run_number }}.zip
            artifacts/linux/Krysalis-Linux-v${{ github.run_number }}.zip
            artifacts/macos/Krysalis-macOS-v${{ github.run_number }}.zip
          tag_name: v1.0.${{ github.run_number }}
          name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
