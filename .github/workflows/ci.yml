name: Build and Release DLLs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Solution
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Download Filament library
      - name: Download Filament Library
        run: |
          New-Item -ItemType Directory -Path "C:/Libraries/filament-windows/" -Force
          Invoke-WebRequest -Uri "https://github.com/google/filament/releases/download/v1.55.0/filament-v1.55.0-windows.tgz" -OutFile "filament.tgz"
          tar -xzf filament.tgz -C C:/Libraries/filament-windows/
        
      # Setup Visual Studio Build Tools
      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Set up NuGet
        uses: NuGet/setup-nuget@v1

      - name: Install dependencies
        run: nuget restore Krysalis.sln

      # Build the solution
      - name: Build the solution
        run: msbuild Krysalis.sln /p:Configuration=Release /p:Platform=x64 /p:LanguageStandard=stdcpp20

      # Upload DLLs as build artifacts
      - name: Upload DLLs as build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built-dlls
          path: |
            **/x64/Release/KrysalisNative.dll
            **/x64/Release/KrysalisManaged.dll

  release:
    name: Create GitHub Release and Upload DLLs
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-dlls

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.0
          name: "Release v1.0.0"
          body: "Automated release of built DLLs"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload KrysalisNative.dll
      - name: Upload KrysalisNative.dll to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./x64/Release/KrysalisNative.dll
          asset_name: KrysalisNative.dll
          asset_content_type: application/octet-stream

      # Upload KrysalisManaged.dll
      - name: Upload KrysalisManaged.dll to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./KrysalisManaged/bin/Release/net472/KrysalisManaged.dll
          asset_name: KrysalisManaged.dll
          asset_content_type: application/octet-stream
