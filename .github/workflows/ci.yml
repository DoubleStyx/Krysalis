name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build, Test, and Release
    strategy:
      matrix:
        os: [windows-2022-gpu-t4-4-core]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Cache Rust dependencies and intermediate files
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cargo
      #       target
      #     key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
      #     restore-keys: |
      #       cargo-${{ runner.os }}-

      # - name: Cache .NET dependencies and intermediate files
      #   if: runner.os == 'windows-latest' || runner.os == 'ubuntu-latest'
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.nuget/packages
      #     key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
      #     restore-keys: |
      #       nuget-${{ runner.os }}-

      # - name: Cache Vulkan SDK
      #   id: cache-vulkan-sdk
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ github.workspace }}/VulkanSDK
      #     key: vulkan-sdk-${{ runner.os }}-1.3.283.0
      #     restore-keys: |
      #       vulkan-sdk-${{ runner.os }}-
      #       vulkan-sdk-

      - name: Verify PowerShell Core Installation
        shell: pwsh
        run: |
          Get-Command pwsh
      

      - name: Set Up Artifact Names
        id: artifacts
        shell: pwsh
        env:
          ACTION_TAG: ${{ github.action_ref }}
        run: |
          if ($env:RUNNER_OS -eq "Windows") {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-artifact-name=vulkanCI-1.3.283.0-windows-2022-x64.zip"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-swiftshader-lib-name=vk_swiftshader.dll"
          } elseif ($env:RUNNER_OS -eq "Linux") {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-artifact-name=vulkanCI-1.3.283.0-ubuntu-20.04-x64.zip"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-swiftshader-lib-name=libvk_swiftshader.so"
          } elseif ($env:RUNNER_OS -eq "macOS") {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-artifact-name=vulkanCI-1.3.283.0-macOS-12-x64.zip"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-swiftshader-lib-name=libvk_swiftshader.dylib"
          } else {
            Write-Error "Unsupported OS: $($env:RUNNER_OS)"
            exit 1
          }

          if ($env:ACTION_TAG) {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-action-tag=$($env:ACTION_TAG)"
            Write-Host "Using action ref: $($env:ACTION_TAG)"
          } else {
            $LATEST_TAG = (Invoke-RestMethod -Uri "https://api.github.com/repos/NcStudios/VulkanCI/releases/latest").tag_name
            Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-action-tag=$LATEST_TAG"
            Write-Host "Using latest tag: $LATEST_TAG"
          }

      - name: Download Artifacts
        uses: robinraju/release-downloader@v1.10
        with:
          repository: 'NcStudios/VulkanCI'
          tag: '${{ steps.artifacts.outputs.vk-ci-action-tag }}'
          out-file-path: 'VulkanSDK'
          extract: true

      - name: Setup Environment
        id: setup-environment
        shell: pwsh
        run: |
          $INSTALL_PATH = "$(Get-Location)/VulkanSDK/1.3.283.0"
          $INSTALL_PATH = $INSTALL_PATH -replace "\\", "/"

          Add-Content -Path $env:GITHUB_ENV -Value "VULKAN_SDK=$INSTALL_PATH"
          Add-Content -Path $env:GITHUB_ENV -Value "VULKAN_SDK_VERSION=1.3.283.0"

          $swiftshaderLibName = "${{ steps.artifacts.outputs.vk-ci-swiftshader-lib-name }}"
          $swiftshaderICD = @"
          {
            "file_format_version": "1.0.0",
            "ICD": {
              "library_path": "$INSTALL_PATH/swiftshader/$swiftshaderLibName",
              "api_version": "1.0.5"
            }
          }
          "@
          $swiftshaderICD | Out-File -FilePath "$INSTALL_PATH/swiftshader/vk_swiftshader_icd.json" -Encoding utf8

          Add-Content -Path $env:GITHUB_ENV -Value "VK_DRIVER_FILES=$INSTALL_PATH/swiftshader/vk_swiftshader_icd.json"

          if ($env:RUNNER_OS -eq "Windows") {
            Add-Content -Path $env:GITHUB_ENV -Value "VK_LAYER_PATH=$INSTALL_PATH/bin"
            Add-Content -Path $env:GITHUB_PATH -Value "$INSTALL_PATH/bin"
          } elseif ($env:RUNNER_OS -eq "Linux") {
            Add-Content -Path $env:GITHUB_ENV -Value "VK_LAYER_PATH=$INSTALL_PATH/share/vulkan/explicit_layer.d"
            $ldLibraryPath = "$env:LD_LIBRARY_PATH;$INSTALL_PATH/lib;$INSTALL_PATH/swiftshader"
            Add-Content -Path $env:GITHUB_ENV -Value "LD_LIBRARY_PATH=$ldLibraryPath"
          } elseif ($env:RUNNER_OS -eq "macOS") {
            Add-Content -Path $env:GITHUB_ENV -Value "VK_LAYER_PATH=$INSTALL_PATH/share/vulkan/explicit_layer.d"
            $dyldLibraryPath = "$env:DYLD_LIBRARY_PATH;$INSTALL_PATH/lib;$INSTALL_PATH/swiftshader"
            Add-Content -Path $env:GITHUB_ENV -Value "DYLD_LIBRARY_PATH=$dyldLibraryPath"
          } else {
            Write-Error "Unsupported OS: $($env:RUNNER_OS)"
            exit 1
          }

          Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-vulkan-install-path=$INSTALL_PATH"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "vk-ci-swiftshader-install-path=$INSTALL_PATH/swiftshader"

      - name: Run Python build script
        shell: pwsh
        run: |
          python -u Krysalis.py

      - name: Run tests
        shell: pwsh
        run: |
          dotnet run --project KrysalisManagedTests/KrysalisManagedTests.csproj

      # Update the 'Prepare artifact structure' steps to use PowerShell
      - name: Prepare artifact structure (Windows)
        if: matrix.os == 'windows-2022-large'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path artifact/Krysalis -Force
          Copy-Item KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.dll artifact/Krysalis/KrysalisManaged.dll
          Copy-Item target/release/KrysalisNative.dll artifact/Krysalis/KrysalisNative.dll
          Copy-Item Krysalis/bin/Release/netstandard2.0/Krysalis.dll artifact/Krysalis.dll
          Compress-Archive -Path "artifact/Krysalis.dll", "artifact/Krysalis" -DestinationPath "Krysalis-Windows-v${{ github.run_number }}.zip"

      - name: Prepare artifact structure (Linux)
        if: matrix.os == 'ubuntu-20.04-large'
        run: |
          mkdir -p artifact/Krysalis
          cp KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.dll artifact/Krysalis/KrysalisManaged.dll
          cp target/release/libKrysalisNative.so artifact/Krysalis/libKrysalisNative.so
          cp Krysalis/bin/Release/netstandard2.0/Krysalis.dll artifact/Krysalis.dll
          cd artifact
          zip -r "../Krysalis-Linux-v${{ github.run_number }}.zip" ./*
        shell: bash

      - name: Prepare artifact structure (macOS)
        if: matrix.os == 'macos-12-large'
        run: |
          mkdir -p artifact/Krysalis
          cp KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.dll artifact/Krysalis/KrysalisManaged.dll
          cp target/release/libKrysalisNative.dylib artifact/Krysalis/libKrysalisNative.dylib
          cp Krysalis/bin/Release/netstandard2.0/Krysalis.dll artifact/Krysalis.dll
          cd artifact
          zip -r "../Krysalis-macOS-v${{ github.run_number }}.zip" ./*
        shell: bash

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-2022-large'
        uses: actions/upload-artifact@v3
        with:
          name: Krysalis-Windows
          path: Krysalis-Windows-v${{ github.run_number }}.zip

      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-20.04-large'
        uses: actions/upload-artifact@v3
        with:
          name: Krysalis-Linux
          path: Krysalis-Linux-v${{ github.run_number }}.zip

      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-12-large'
        uses: actions/upload-artifact@v3
        with:
          name: Krysalis-macOS
          path: Krysalis-macOS-v${{ github.run_number }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: Krysalis-Windows
          path: artifacts/windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: Krysalis-Linux
          path: artifacts/linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: Krysalis-macOS
          path: artifacts/macos

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows/Krysalis-Windows-v${{ github.run_number }}.zip
            artifacts/linux/Krysalis-Linux-v${{ github.run_number }}.zip
            artifacts/macos/Krysalis-macOS-v${{ github.run_number }}.zip
          tag_name: v1.0.${{ github.run_number }}
          name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
