name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Release
    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Cache Rust dependencies and intermediate files
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cargo
      #       target
      #     key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
      #     restore-keys: |
      #       cargo-${{ runner.os }}-

      # - name: Cache .NET dependencies and intermediate files
      #   if: runner.os == 'windows-latest' || runner.os == 'ubuntu-latest'
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.nuget/packages
      #     key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
      #     restore-keys: |
      #       nuget-${{ runner.os }}-

      # - name: Cache Vulkan SDK
      #   id: cache-vulkan-sdk
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ github.workspace }}/VulkanSDK
      #     key: vulkan-sdk-${{ runner.os }}-1.3.283.0
      #     restore-keys: |
      #       vulkan-sdk-${{ runner.os }}-
      #       vulkan-sdk-

      - name: Setup Vulkan SDK
        if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'
        uses: NcStudios/VulkanCI@v1.0
        with:
          sdkVersion: 1.3.283.0

      - name: Run Python build script
        run: python3 -u Krysalis.py
        shell: bash

      - name: Prepare artifact structure (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p artifact/Krysalis
          cp KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.dll artifact/Krysalis/KrysalisManaged.dll
          cp target/release/KrysalisNative.dll artifact/Krysalis/KrysalisNative.dll
          cp Krysalis/bin/Release/netstandard2.0/Krysalis.dll artifact/Krysalis.dll

      - name: Prepare artifact structure (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifact/Krysalis
          cp KrysalisManaged/bin/Release/netstandard2.0/KrysalisManaged.so artifact/Krysalis/KrysalisManaged.so
          cp target/release/libKrysalisNative.so artifact/Krysalis/libKrysalisNative.so
          cp Krysalis/bin/Release/netstandard2.0/libKrysalis.so artifact/libKrysalis.so

      - name: Upload .NET and Rust artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Krysalis
          path: artifact/*
